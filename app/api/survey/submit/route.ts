import { createClient } from '@supabase/supabase-js';
import { NextRequest, NextResponse } from 'next/server';

// Create a Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

const supabase = createClient(supabaseUrl!, supabaseKey!);

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    const { user_id, form_id, form_title, responses, metadata } = body;
    
    if (!user_id || !form_id || !responses) {
      return NextResponse.json(
        { error: 'Missing required fields: user_id, form_id, responses' },
        { status: 400 }
      );
    }

    const surveyResponse = {
      user_id,
      form_id,
      form_title: form_title || 'Untitled Survey',
      responses,
      metadata: metadata || {}
      // Note: id, submitted_at, created_at, updated_at will be auto-generated by the database
    };

    try {
      // Test connection first
      const { error: testError } = await supabase
        .from('survey_responses')
        .select('count', { count: 'exact', head: true });
      
      if (testError) {
        console.error('Supabase connection test failed:', testError);
        return NextResponse.json(
          { 
            error: 'Database connection failed',
            details: testError
          },
          { status: 500 }
        );
      }

      console.log('Supabase connection test successful');

      // Insert into survey_responses table using Supabase
      const { data, error } = await supabase
        .from('survey_responses')
        .insert([surveyResponse])
        .select()
        .single();

      if (error) {
        console.error('Supabase insert error:', error);
        console.error('Error details:', JSON.stringify(error, null, 2));
        return NextResponse.json(
          { 
            error: error.message || 'Database error',
            details: {
              code: error.code,
              message: error.message,
              hint: error.hint,
              details: error.details
            }
          },
          { status: 500 }
        );
      }

      console.log('Survey submitted successfully:', data);

      // Send to ActivePieces webhook
      try {
        // Extract email and whatsapp from user metadata or responses
        let email = '';
        let whatsapp = '';
        
        // Look for email and whatsapp in the survey responses
        Object.values(responses).forEach((response: any) => {
          if (response.field_type === 'email') {
            email = response.answer || '';
          }
          if (response.field_type === 'phone_number') {
            whatsapp = response.answer || '';
          }
          // Also check for inline_group fields that might contain email/phone
          if (response.field_type === 'inline_group' && typeof response.answer === 'object') {
            Object.values(response.answer).forEach((subAnswer: any) => {
              if (typeof subAnswer === 'string') {
                if (subAnswer.includes('@')) email = subAnswer;
                if (/^\(?[\d\s\-\+\(\)]+\)?$/.test(subAnswer)) whatsapp = subAnswer;
              }
            });
          }
        });

        // Format data according to your specification
        const formattedData = Object.entries(responses).map(([fieldRef, response]: [string, any]) => ({
          question: response.title || '',
          question_id: response.field_id || fieldRef,
          answer: Array.isArray(response.answer) 
            ? response.answer.map((ans: any) => ({
                text: typeof ans === 'string' ? ans : ans.title || ans.label || String(ans),
                id: typeof ans === 'object' ? ans.id || ans.ref || fieldRef : fieldRef
              }))
            : [{
                text: typeof response.answer === 'string' ? response.answer : String(response.answer),
                id: response.field_id || fieldRef
              }]
        }));

        const webhookPayload = {
          email,
          whatsapp,
          created_at: data.submitted_at,
          data: formattedData
        };

        console.log('Sending to ActivePieces webhook:', webhookPayload);

        const webhookResponse = await fetch('https://cloud.activepieces.com/api/v1/webhooks/r4mUwKVV5xl8bf3EPEsPp', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(webhookPayload)
        });

        if (webhookResponse.ok) {
          console.log('Successfully sent to ActivePieces webhook');
        } else {
          console.error('Failed to send to ActivePieces webhook:', webhookResponse.status, webhookResponse.statusText);
        }
      } catch (webhookError) {
        console.error('Error sending to ActivePieces webhook:', webhookError);
        // Don't fail the main request if webhook fails
      }

      return NextResponse.json({ success: true, data });
      
    } catch (dbError) {
      console.error('Database error:', dbError);
      console.error('Error type:', typeof dbError);
      console.error('Error details:', JSON.stringify(dbError, null, 2));
      return NextResponse.json(
        { 
          error: 'Failed to save survey response',
          details: dbError instanceof Error ? { message: dbError.message, stack: dbError.stack } : dbError
        },
        { status: 500 }
      );
    }

  } catch (error) {
    console.error('API Error:', error);
    return NextResponse.json(
      { error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    );
  }
}