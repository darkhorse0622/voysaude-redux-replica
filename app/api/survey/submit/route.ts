import { createClient } from '@supabase/supabase-js';
import { NextRequest, NextResponse } from 'next/server';

// Create a Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

const supabase = createClient(supabaseUrl!, supabaseKey!);

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    const { user_id, form_id, form_title, responses, metadata } = body;
    
    if (!user_id || !form_id || !responses) {
      return NextResponse.json(
        { error: 'Missing required fields: user_id, form_id, responses' },
        { status: 400 }
      );
    }

    const surveyResponse = {
      user_id,
      form_id,
      form_title: form_title || 'Untitled Survey',
      responses,
      metadata: metadata || {}
      // Note: id, submitted_at, created_at, updated_at will be auto-generated by the database
    };

    try {
      // Test connection first
      const { error: testError } = await supabase
        .from('survey_responses')
        .select('count', { count: 'exact', head: true });
      
      if (testError) {
        console.error('Supabase connection test failed:', testError);
        return NextResponse.json(
          { 
            error: 'Database connection failed',
            details: testError
          },
          { status: 500 }
        );
      }

      console.log('Supabase connection test successful');

      // Insert into survey_responses table using Supabase
      const { data, error } = await supabase
        .from('survey_responses')
        .insert([surveyResponse])
        .select()
        .single();

      if (error) {
        console.error('Supabase insert error:', error);
        console.error('Error details:', JSON.stringify(error, null, 2));
        return NextResponse.json(
          { 
            error: error.message || 'Database error',
            details: {
              code: error.code,
              message: error.message,
              hint: error.hint,
              details: error.details
            }
          },
          { status: 500 }
        );
      }

      console.log('Survey submitted successfully:', data);
      return NextResponse.json({ success: true, data });
      
    } catch (dbError) {
      console.error('Database error:', dbError);
      console.error('Error type:', typeof dbError);
      console.error('Error details:', JSON.stringify(dbError, null, 2));
      return NextResponse.json(
        { 
          error: 'Failed to save survey response',
          details: dbError instanceof Error ? { message: dbError.message, stack: dbError.stack } : dbError
        },
        { status: 500 }
      );
    }

  } catch (error) {
    console.error('API Error:', error);
    return NextResponse.json(
      { error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    );
  }
}